spring: 
  datasource:
#   配置主数据源  默认的是org.apache.tomcat.jdbc.pool.DataSource
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: root
    driver-class-name: com.mysql.jdbc.Driver
    dbcp2:
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最大，最小
      initial-size: 5
      max-total: 20
      max-idle: 8
      min-idle: 5
# 配置获取连接等待超时的时间
      max-wait-millis: 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
# 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-conn-lifetime-millis: 20
      
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true



#server:
#可以修改默认端口号
#  port: 8081 
#可以修改访问路径，传统的是http://ip:port/ 配置之后是http://ip:port/path/
#  context-path: /springboothello1    
      
#jpa配置
  jpa:
    database: MYSQL
    show-sql: true
    hibernate:
#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值
      ddl-auto: update
      naming:
        strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties: 
      hibernate: 
        dialect: org.hibernate.dialect.MySQL5Dialect
        
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML5
    encoding: UTF-8
    content-type: text/html
#Thymeleaf缓存在开发过程中，肯定是不行的，那么就要在开发的时候把缓存关闭
    cache: false